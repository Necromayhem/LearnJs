// Promise API

// В классе Promise есть 6 статических методов


// 1. Promise.all

// Принимает массив промисов

// let promise = Promise.all(iterable);

// Новый промис завершится, когда завершится весь переданный список промисов, и его результатом будет массив их результатов.

Promise.all([
    new Promise(resolve => setTimeout(() => resolve(1), 3000)), // 1
    new Promise(resolve => setTimeout(() => resolve(2), 2000)), // 2
    new Promise(resolve => setTimeout(() => resolve(3), 1000))  // 3
  ]).then(alert); // когда все промисы выполнятся, результат будет 1,2,3
  // каждый промис даёт элемент массива

// Если один промис завершается с ошибкой, то весь Promise.all завершается с ней, полностью забывая про остальные промисы в списке. Их результаты игнорируются.


// 2. Promise.allSettled

// let promise = Promise.allSettled(iterable);

// Метод Promise.allSettled всегда ждёт завершения всех промисов. В массиве результатов будет

// {status:"fulfilled", value:результат} для успешных завершений,
// {status:"rejected", reason:ошибка} для ошибок.


// 3. Promise.race
// Метод очень похож на Promise.all, но ждёт только первый выполненный промис, из которого берёт результат (или ошибку).

// let promise = Promise.race(iterable);

// 4. Promise.any

// let promise = Promise.any(iterable);

// Метод очень похож на Promise.race, но ждёт только первый успешно выполненный промис, из которого берёт результат.

// Если ни один из переданных промисов не завершится успешно, тогда возвращённый объект Promise будет отклонён с помощью AggregateError – специального объекта ошибок, который хранит все ошибки промисов в своём свойстве errors.


// 5. Promise.resolve
// Promise.resolve(value) создаёт успешно выполненный промис с результатом value.

// То же самое, что:

// let promise = new Promise(resolve => resolve(value));
// Этот метод используют для совместимости: когда ожидается, что функция возвратит именно промис.


// 6. Promise.reject

// Promise.reject(error) создаёт промис, завершённый с ошибкой error.
// То же самое, что:

// let promise = new Promise((resolve, reject) => reject(error));




// 1 Promise.all(promises) – ожидает выполнения всех промисов и возвращает массив с результатами. Если любой из указанных промисов вернёт ошибку, то результатом работы Promise.all будет эта ошибка, результаты остальных промисов будут игнорироваться.
// 2 Promise.allSettled(promises) (добавлен недавно) – ждёт, пока все промисы завершатся и возвращает их результаты в виде массива с объектами, у каждого объекта два свойства:
// status: "fulfilled", если выполнен успешно или "rejected", если ошибка,
// value – результат, если успешно или reason – ошибка, если нет.
// 3 Promise.race(promises) – ожидает первый выполненный промис, который становится его результатом, остальные игнорируются.
// 4 Promise.any(promises) (добавлен недавно) – ожидает первый успешно выполненный промис, который становится его результатом, остальные игнорируются. Если все переданные промисы отклонены, AggregateError становится ошибкой Promise.any.
// 5 Promise.resolve(value) – возвращает успешно выполнившийся промис с результатом value.
// 6 Promise.reject(error) – возвращает промис с ошибкой error.
// Из всех перечисленных методов, самый часто используемый – это, пожалуй, Promise.all.







