// =============== 1 –ó–ê–î–ê–ù–ò–ï  ===============
// –î–∞–Ω –º–∞—Å—Å–∏–≤:

// [
//     [1, 2, 3],
//     [4, 5, 6],
//     [7, 8, 9],
// ]

// –°–ª–µ–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –≤ –æ–¥–∏–Ω –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤:

// [1, 2, 3, 4, 5, 6, 7, 8, 9]

function merger(arr){
    return arr.reduce((acc, current) => acc.concat(current), []);
}

// console.log(merger([[1, 2, 3], [4, 5, 6], [7, 8, 9]]));


//  =============== 2 –ó–ê–î–ê–ù–ò–ï  ===============
// –î–∞–Ω –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏:

// {
//     a: {
//         b: {
//             c: '+++'
//         }
//     },
// }

// –°–¥–µ–ª–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –æ–±—ä–µ–∫—Ç–∞, –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–ª—É—á–∞—è —Å—Ç—Ä–æ–∫—É —Å –∫–ª—é—á–∞–º–∏ –æ–±—ä–µ–∫—Ç–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏:
// func('a.b.c'); // –≤–µ—Ä–Ω–µ—Ç '+++'

let obj1 = {
         a: {
             b: {
                 c: '+++'
             }
         },
    }


function deeper(obj, string){
    const keys = string.split(".");
    return keys.reduce((acc, key) => {
        return acc && acc[key]; // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –æ–±—ä–µ–∫—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–ª—é—á–∏
    }, obj); 
}

// console.log(deeper(obj1, 'a.b.c')); // +++



//  =============== 3 –ó–ê–î–ê–ù–ò–ï  ===============
//  –ß–∞—Ç-–±–æ—Ç —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–ø—Ä–æ—Å–æ–≤
// –°–æ–∑–¥–∞–π —á–∞—Ç-–±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∏—Ö —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π 2 —Å–µ–∫—É–Ω–¥—ã). 
// –£ –±–æ—Ç–∞ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. 
// –ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –æ–¥–Ω–∏–º –∏–∑ —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞.

// –£—Å–ª–æ–≤–∏—è:
// –ë–æ—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ sendMessage(message).
// –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑–æ–π –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤.
// –£ –±–æ—Ç–∞ –µ—Å—Ç—å –º–∞—Å—Å–∏–≤ –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ addResponse(response).

// –ü—Ä–∏–º–µ—Ä:
// const bot = new ChatBot();
// bot.sendMessage('–ü—Ä–∏–≤–µ—Ç, –±–æ—Ç!');  // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
// bot.addResponse('–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!');
// bot.sendMessage('–ö–∞–∫ –¥–µ–ª–∞?');  //  –ë–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –æ–¥–Ω–æ–π –∏–∑ 

let chatBot = {
  answers: ['–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!', '–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?', '–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?', '–ö–∞–∫ –ø—Ä–æ—à—ë–ª –¥–µ–Ω—å?'],

  sendMessage: function(){
    return setTimeout(() => {
      const randomIndex = Math.floor(Math.random() * this.answers.length);
      const randomAnswer = this.answers[randomIndex];
      console.log(randomAnswer);
    }, 2000)
  },

  addResponse: function(string){
    let newPhrase = string;
    if(typeof newPhrase === 'string'){
      this.answers.push(newPhrase);
    }
  }
};

chatBot.addResponse("–¢–µ—Å—Ç")
chatBot.addResponse("–ø—Ä–∏–≤ —á—ë –¥–µ–ª")
chatBot.addResponse("–∞–±–æ–±–∞")
chatBot.addResponse("—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ")
chatBot.addResponse("—á–µ–≥–æ —Ö–æ—á–µ—à—å???")
console.log(chatBot.answers);

chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()
chatBot.sendMessage()





//  =============== 4 –ó–ê–î–ê–ù–ò–ï  ===============
// –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–∫—É—Ä—Å–∏–∏. –§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ 
// ùëõ
// n –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 
// ùëõ
// n. –§–∞–∫—Ç–æ—Ä–∏–∞–ª —á–∏—Å–ª–∞ 0 —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–∞–≤–Ω—ã–º 1.

// –£—Å–ª–æ–≤–∏—è:
// –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∫—É—Ä—Å–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞.
// –ï—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 0 ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π null.
// –ü—Ä–æ–≤–µ—Ä—è–π –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–æ, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ.
// –ü—Ä–∏–º–µ—Ä:
// console.log(factorial(5)); // 120
// console.log(factorial(0)); // 1
// console.log(factorial(-1)); // null

function factorial(n){
    if(typeof n !== "number"){
        return "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!"
    } 
    if(n < 0) return null;
    if(n === 0) return 1;

    return n*factorial(n - 1)
};

// console.log(factorial(5)); // 120
// console.log(factorial(-1)); // null
// console.log(factorial('qqq')); // –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ




//  =============== 5 –ó–ê–î–ê–ù–ò–ï  ===============
// –¢–µ–±–µ –¥–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –≤ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö: –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞ —Å –æ–±—ä–µ–∫—Ç–∞–º–∏.

const usersArray = [
  { id: "34rdca3eeb7f6fgeed471198", name: "Andrew", age: 25 },
  { id: "76rdca3eeb7f6fgeed471100", name: "Alexey", age: 15 },
  { id: "12rdca3eeb7f6fgeed4711012", name: "Egor", age: 13 },
  { id: "32rdca3eeb7f6fgeed471101", name: "Kate", age: 31 },
  { id: "98rdca3eeb7f6fgeed471102", name: "Elena", age: 18 }
];

const usersObject = {
  "34rdca3eeb7f6fgeed471198": {
    id: "34rdca3eeb7f6fgeed471198",
    name: "Andrew",
    age: 25
  },
  "76rdca3eeb7f6fgeed471100": {
    id: "76rdca3eeb7f6fgeed471100",
    name: "Alexey",
    age: 15
  },
  "12rdca3eeb7f6fgeed4711012": {
    id: "12rdca3eeb7f6fgeed4711012",
    name: "Egor",
    age: 13
  },
  "32rdca3eeb7f6fgeed471101": {
    id: "32rdca3eeb7f6fgeed471101",
    name: "Kate",
    age: 31
  },
  "98rdca3eeb7f6fgeed471102": {
    id: "98rdca3eeb7f6fgeed471102",
    name: "Elena",
    age: 18
  }
};

// // –¢–µ–±–µ  –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getAdultUsers(), –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç:
// // –ü—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
// // –í—ã–±–∏—Ä–∞—Ç—å –∏–∑ –Ω–µ–≥–æ —Ç–æ–ª—å–∫–æ —Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª–µ age –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 18
// // –í–æ–∑–≤—Ä–∞—â–∞—Ç—å –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å–æ –≤–∑—Ä–æ—Å–ª—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏. –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –º–∞—Å—Å–∏–≤, —Ç–æ –≤–µ—Ä–Ω—É—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ç–∞–∫–∂–µ –º–∞—Å—Å–∏–≤. –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç, —Ç–æ –æ–±—ä–µ–∫—Ç.
// // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –≤ —Ä–∞–±–æ—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Object.keys()

// // –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏:

function getAdultUsers(users) {
  let obj = users;
  
  if(Array.isArray(obj)){
    return obj.filter(user => user.age >= 18)
  } else if(typeof obj === "object"){
    console.log("–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ö–æ–¥");
    return Object.values(obj).filter(user => user.age >= 18).reduce((acc, user) => {
        acc[user.id] = user;
        return acc;
    }, {  })
  }
}

// console.log(getAdultUsers(usersArray));
// console.log(getAdultUsers(usersObject));

[
    { id: '34rdca3eeb7f6fgeed471198', name: 'Andrew', age: 25 },
    { id: '32rdca3eeb7f6fgeed471101', name: 'Kate', age: 31 },
    { id: '98rdca3eeb7f6fgeed471102', name: 'Elena', age: 18 }
]


// // console.log(getAdultUsers(usersObject));
// // /*
// // {
// //     '34rdca3eeb7f6fgeed471198': { 
// //         id: '34rdca3eeb7f6fgeed471198', 
// //         name: 'Andrew', 
// //         age: 25 
// //     },
// //     '32rdca3eeb7f6fgeed471101': { 
// //         id: '32rdca3eeb7f6fgeed471101', 
// //         name: 'Kate', 
// //         age: 31 
// //     },
// //     '98rdca3eeb7f6fgeed471102': { 
// //         id: '98rdca3eeb7f6fgeed471102', 
// //         name: 'Elena', 
// //         age: 18 
// //     }
// // }


const array = [1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1,1,1,1,1, 0, 0, 0, 0,];

function maxChain(arr){
  let curr = 0; // —Ç–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  let max = 0; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å

  for(let i = 0; i < arr.length; i++){
    if(arr[i] === 1){
      curr++;
      if(curr>max){
        max = curr;
      }
    } else{
      curr = 0;
    }
  } return max;
}

// console.log(maxChain(array)); 









